#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdlib>
#include<cstring>
#include<queue>
#include<cmath>
#include<map>
#include<unordered_map>
#include<unordered_set>
#include<set>
#include<regex>
#define FOR(i,a,b) for( int i=(a);i<(b);++i)
#define MEMSET(arr,value,type,length) memset(arr,value,sizeof(type)*length)
#define MEMSET_0(arr,type,length) MEMSET(arr,0,type,length)
#define MEMSET_MIN(arr,type,length) MEMSET(arr,-0x3f,type,length)
#define MEMSET_MAX(arr,type,length) MEMSET(arr,0x3f,type,length)
#define READ_INT(i) int i;cin>>i
using namespace std;

struct node{
    int key;
    node* lchild=nullptr;
    node* rchild=nullptr;
    int height;
    node(int _k){
        key=_k;
        height=1;
    }
}*tree;
int getHeight(node *root){
    return root==nullptr?0:root->height;
}

node *R(node *root){
    node* lc=root->lchild;
    root->lchild=lc->rchild;
    lc->rchild=root;
    root->height=max(getHeight(root->lchild),getHeight(root->rchild))+1;
    lc->height=max(getHeight(lc->lchild),getHeight(lc->rchild))+1;
    return lc;
}

node *L(node *root){
    node *rc=root->rchild;
    root->rchild=rc->lchild;
    rc->lchild=root;
    root->height=max(getHeight(root->lchild),getHeight(root->rchild))+1;
    rc->height=max(getHeight(rc->lchild),getHeight(rc->rchild))+1;
    return rc;
}

node * RL(node *root){
    root->rchild=R(root->rchild);
    return L(root);
}
node * LR(node *root){
    root->lchild=L(root->lchild);
    return R(root);
}


node* _insert(int key,node *root){
    if(root==nullptr)return new node(key);
    if(root->key>=key){
        root->lchild=_insert(key,root->lchild);
    }
    else{
        root->rchild=_insert(key,root->rchild);
    }


    int lh=getHeight(root->lchild);
    int rh=getHeight(root->rchild);
    if(lh-rh>=2){
        if(key<=root->lchild->key){
            root=R(root);
        }
        else{
            root=LR(root);
        }
    }else if(rh-lh>=2){
        if(key>root->rchild->key){
            root=L(root);
        }
        else{
            root=RL(root);
        }
    }
    root->height=max(getHeight(root->lchild),getHeight(root->rchild))+1;
    return root;
}

int main()
{
    freopen("data.txt","r",stdin);
    READ_INT(tree_count);

    FOR(i,0,tree_count){
        READ_INT(tmp);
        tree=_insert(tmp,tree);
    }
    queue<node*> q;
    vector<int> res;
    q.push(tree);
    bool flag=false;
    bool isComplete=true;
    while(q.size()!=0){
        node *foo=q.front();
        if(!flag){
            if(foo==nullptr){
                flag=true;
            }
            else{
                res.push_back(foo->key);
                q.push(foo->lchild);
                q.push(foo->rchild);
            }
        }else{
            if(foo!=nullptr){
                res.push_back(foo->key);
                q.push(foo->lchild);
                q.push(foo->rchild);
                isComplete=false;
            }else{
            }
        }
        q.pop();
    }

    for(int i=0,len=res.size();i<len;i++){
        printf("%d%c",res[i],i==len-1?'\n':' ');
    }
    printf("%s",isComplete?"YES":"NO");
	return 0;
}





#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdio>
#include<string>
#include<vector>
#include<algorithm>
#include<math.h>
#include<regex>
#include<set>
#include<map>
#include<queue>
using namespace std;
int *weight;
int **dp;
bool **mark;

int length,capacity;
bool cmp(int& a,int &b){return a>b;}
int main()
{
    freopen("data.txt","r",stdin);

    cin>>length>>capacity;
    weight=new int[length+1];
    weight[0]=0;
    for(int i=1;i<=length;i++){
        cin>>weight[i];
    }

    sort(weight+1,weight+1+length,cmp);
    dp=new int*[length+1];
    for(int i=0;i<=length;i++){
        dp[i]=new int[capacity+1];
        memset(dp[i],0,sizeof(int)*(capacity+1));
    }

    mark=new bool*[length+1];
    for(int i=0;i<=length;i++){
        mark[i]=new bool[capacity+1];
        memset(mark[i],0,sizeof(bool)*(capacity+1));
    }

    for(int i=1;i<=length;i++){
        for(int j=1;j<=capacity;j++){
            if(weight[i]>j){
                dp[i][j]=dp[i-1][j];
            }
            else{
                int tmp=dp[i-1][j-weight[i]]+weight[i];
                if(tmp<dp[i-1][j]){
                    dp[i][j]=dp[i-1][j];
                }
                else{
                    dp[i][j]=tmp;
                    mark[i][j]=true;
                }
            }
        }
    }
    if(dp[length][capacity]!=capacity){
        printf("No Solution");
        return 0;
    }
    vector<int> res;
    int m=capacity;
    int n=length;
    while(m!=0){
        while(!mark[n][m])n--;
        if(mark[n][m]){
            res.push_back(weight[n]);
            m-=weight[n];
            n--;
        }
    }
    int len=res.size();
    for(int i=0;i<len;i++){
        if(i==(len-1)){
            printf("%d",res[i]);
        }
        else{
            printf("%d ",res[i]);
        }
    }
    return 0;
}

#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdlib>
#include<cstring>
#include<queue>
#include<cmath>
#include<map>
#include<unordered_map>
#include<set>
#include<regex>
#define FOR(i,a,b) for( int i=(a);i<(b);++i)
#define MEMSET(arr,value,type,length) memset(arr,value,sizeof(type)*length)
#define MEMSET_0(arr,type,length) MEMSET(arr,0,type,length)
#define MEMSET_MIN(arr,type,length) MEMSET(arr,-0x3f,type,length)
#define MEMSET_MAX(arr,type,length) MEMSET(arr,0x3f,type,length)
#define READ_INT(i) int i;scanf("%d",&i)
using namespace std;
int v_count,e_count;
struct node{
    int content;
    node* lchild=nullptr;
    node* rchild=nullptr;
    int level;
    node(int _c,int _l){
        content=_c;
        level=_l;
    }
};
int max_level;
node* _insert(node *root,const int key,int level){
    if(root==nullptr) {
        max_level=max(max_level,level);
        return new node(key,level);
    }
    if(key<=root->content){
        root->lchild=_insert(root->lchild,key,level+1);
    }
    else{
        root->rchild=_insert(root->rchild,key,level+1);
    }
    return root;
}

int lowest=0;
int lowest_above=0;

void dfs(node* root){
    if(root==nullptr)return;
    if(root->level==max_level) lowest++;
    else if(root->level==max_level-1) lowest_above++;
    dfs(root->lchild);
    dfs(root->rchild);
}


int main()
{
    freopen("data.txt","r",stdin);
    cin>>v_count;
    node* root=nullptr;
    FOR(i,0,v_count){
        READ_INT(a);
        root=_insert(root,a,0);
    }
    if(max_level==0){
        printf("1 + 0 = 1");
    }
    else{
        dfs(root);
        printf("%d + %d = %d",lowest,lowest_above,lowest+lowest_above);
    }
	return 0;
}





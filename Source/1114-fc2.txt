#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdio>
#include<string>
#include<vector>
#include<algorithm>
#include<math.h>
#include<regex>
#include<set>
#include<unordered_map>
#include<unordered_set>
#include<map>
#include<queue>
#define MEMSET_MIN(i,j,k) memset(i,-0x3f,sizeof(j)*(k))
#define MEMSET_MAX(i,j,k) memset(i,0x3f,sizeof(j)*(k))
#define MEMSET_0(i,j,k) memset(i,0,sizeof(j)*(k))
#define FOR(i,j,k) for(int i=(j);i<(k);++i)
#define READ_INT(tmp) int tmp;scanf("%d",&tmp)
using namespace std;
int query_count;
struct person {
	vector<int> adj_m;
	double estate = 0;
	double area = 0;
};

unordered_map<int, person> adj_m;
unordered_map<int,bool> vis;

struct family
{
	set<int, less<int> > member;
	double estate=0;
	double area=0;
	int id;
	int cnt;
};
vector<family> v;

void dfs(int key,double& estate,double& area,set<int,less<int> >&_set) {
	vis[key] = true;
	estate += adj_m[key].estate;
	area += adj_m[key].area;
	_set.insert(key);

	for (auto &it : adj_m[key].adj_m) {
		if (!vis[it]) {
			dfs(it, estate, area,_set);
		}
	}
}
bool cmp(const family&f1, const family&f2) {
	if (f1.area == f2.area) {
		return f1.id < f2.id;
	}
	return f1.area > f2.area;
}

void check() {
	for (auto &it : adj_m) {
		if (vis[it.first]) continue;
		family f;
		dfs(it.first, f.estate, f.area,f.member);
		f.id = *f.member.begin();
		f.cnt = f.member.size();
		f.estate /= f.cnt;
		f.area /= f.cnt;
		v.push_back(f);
	}
	printf("%d\n", v.size());
	sort(v.begin(), v.end(), cmp);
	for (auto &it : v) {
		printf("%04d %d %0.3f %0.3f\n", it.id, it.cnt, it.estate, it.area);
	}
}

int main()
{
	freopen("data.txt","r",stdin);
	cin >> query_count;
	FOR(i, 0, query_count) {
		int id, f, m, c;
		cin >> id >> f >> m >> c;
		
		person &d = adj_m[id];
		vector<int> &vd = d.adj_m;

		if (f != -1) { 
			vd.push_back(f);
			adj_m[f].adj_m.push_back(id);
		}
		if (m != -1) {
			vd.push_back(m);
			adj_m[m].adj_m.push_back(id);
		}
		FOR(j, 0, c) {
			READ_INT(tmp);
			vd.push_back(tmp);
			adj_m[tmp].adj_m.push_back(id);
		}
		cin >> d.estate >> d.area;
	}
	check();
	return 0;
}


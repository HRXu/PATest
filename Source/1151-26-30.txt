#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdio>
#include<string>
#include<vector>
#include<algorithm>
#include<math.h>
#include<regex>
#include<set>
using namespace std;

int case_count,node_count;
int *pre_order,*in_order;

int a,b;

//status -1 a
//       -2 b
//       -3 a b
//       1  a is b
//       2  b is a
//       5  lca
int ancestor;
int _pos_a=-1;
int _pos_b=-1;
int check(int _begin,int _end,int pre_start){
    int _pos=_begin;
    for(;_pos<=_end&&pre_order[pre_start]!=in_order[_pos];_pos++);


    if(_pos_a==_pos) return 1;
    if(_pos_b==_pos) return 2;

    //search left
    if(_pos_a<_pos && _pos_b<_pos){
        return check(_begin,_pos-1,pre_start+1);
    }
    //search right
    if(_pos_a>_pos && _pos_b>_pos){
        return check(_pos+1,_end,pre_start+_pos-_begin+1);
    }
    ancestor=in_order[_pos];
    return 5;
};

int main()
{
    freopen("data.txt","r",stdin);
    cin>>case_count>>node_count;

    pre_order=new int[node_count];
    in_order=new int[node_count];

    for(int i=0;i<node_count;i++){
        cin >>in_order[i];
    }
    for(int i=0;i<node_count;i++){
        cin >>pre_order[i];
    }

    for(int i=0;i<case_count;i++){
        cin>>a>>b;

        int status;
        _pos_a=-1;
        _pos_b=-1;
        for(int i=0;i<node_count;i++){
            if(in_order[i]==a)_pos_a=i;
            if(in_order[i]==b)_pos_b=i;
        };

        if(_pos_a==-1){
            if(_pos_b==-1){
                status= -3;
            }
            else status= -1;
        }
        else if(_pos_b==-1) {status= -2;}
        else {status=check(0,node_count-1,0);}

        switch(status){
        case -1:
            printf("ERROR: %d is not found.\n",a);
            break;
        case -2:
            printf("ERROR: %d is not found.\n",b);
            break;
        case -3:
            printf("ERROR: %d and %d are not found.\n",a,b);
            break;
        case 1:
            printf("%d is an ancestor of %d.\n",a,b);
            break;
        case 2:
            printf("%d is an ancestor of %d.\n",b,a);
            break;
        case 5:
            printf("LCA of %d and %d is %d.\n",a,b,ancestor);
            break;
        }
    }
	return 0;
}

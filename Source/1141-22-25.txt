#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdlib>
#include<cstring>
#include<queue>
#include<cmath>
#include<map>
#include<unordered_map>
#include<set>
#include<regex>
#define FOR(i,a,b) for( int i=(a);i<(b);++i)
#define MEMSET(arr,value,type,length) memset(arr,value,sizeof(type)*length)
#define MEMSET_0(arr,type,length) MEMSET(arr,0,type,length)
#define MEMSET_MIN(arr,type,length) MEMSET(arr,-0x3f,type,length)
#define MEMSET_MAX(arr,type,length) MEMSET(arr,0x3f,type,length)
#define READ_INT(i) int i;scanf("%d",&i)
using namespace std;
int v_count;
struct school{
    string name;
    double score=0;
    int people=0;
};
map<string,school> m;

bool cmp(const school&a,const school&b){
    if(a.score==b.score){
        if(a.people==b.people){
            return a.name<b.name;
        }
        return a.people<b.people;
    }
    return a.score>b.score;
}

int main()
{
    //freopen("data.txt","r",stdin);
    cin>>v_count;
    FOR(i,0,v_count){
        string s1,s2;int tmp;
        cin>>s1>>tmp>>s2;
        transform(s2.begin(),s2.end(),s2.begin(),::tolower);
        if(s1[0]=='A'){
            school &sc=m[s2];
            sc.score+=tmp;
            sc.people++;
        }else if(s1[0]=='T'){
            school &sc=m[s2];
            sc.score+=tmp*1.5;
            sc.people++;
        }else if(s1[0]=='B'){
            school &sc=m[s2];
            sc.score+=tmp/1.5;
            sc.people++;
        }
    }

    vector<school> res;
    for(auto&it:m){
        it.second.name=it.first;
        res.push_back(it.second);
    }
    sort(res.begin(),res.end(),cmp);
    printf("%d\n",res.size());
    int score=res[0].score;
    for(int i=0,_rank=1,len=res.size();i<len;i++){
        if(score==(int)res[i].score){
            printf("%d %s %d %d\n",_rank,res[i].name.c_str(),(int)res[i].score,res[i].people);
        }
        else{
            _rank=i+1;
            score=res[i].score;
            printf("%d %s %d %d\n",_rank,res[i].name.c_str(),(int)res[i].score,res[i].people);
        }
    }
	return 0;
}





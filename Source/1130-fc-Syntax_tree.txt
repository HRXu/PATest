#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdlib>
#include<cstring>
#include<queue>
#include<cmath>
#include<map>
#include<unordered_map>
#include<set>
#include<regex>
#define FOR(i,a,b) for( int i=(a);i<(b);++i)
#define MEMSET(arr,value,type,length) memset(arr,value,sizeof(type)*length)
#define MEMSET_0(arr,type,length) MEMSET(arr,0,type,length)
#define MEMSET_MIN(arr,type,length) MEMSET(arr,-0x3f,type,length)
#define MEMSET_MAX(arr,type,length) MEMSET(arr,0x3f,type,length)
#define READ_INT(i) int i;scanf("%d",&i)
using namespace std;
int v_count;


struct node{
    string s;
    int lchild=-1;
    int rchild=-1;
}*node_list;

int root;
void dfs(int _root){
    if(node_list[_root].lchild==-1&&node_list[_root].rchild==-1)return;
    if(node_list[_root].lchild!=-1&&node_list[_root].rchild==-1){
        int l=node_list[_root].lchild;
        dfs(l);
        node_list[_root].s="("+node_list[l].s+node_list[_root].s+")";
        return;
    }
    if(node_list[_root].lchild==-1&&node_list[_root].rchild!=-1){
        int r=node_list[_root].rchild;
        dfs(r);
        node_list[_root].s="("+node_list[_root].s+node_list[r].s+")";
        return;
    }
    int r=node_list[_root].rchild;
    int l=node_list[_root].lchild;
    dfs(l);
    dfs(r);
    node_list[_root].s="("+node_list[l].s+node_list[_root].s+node_list[r].s+")";
    return;
}

int main()
{
    freopen("data.txt","r",stdin);
    cin>>v_count;
    node_list=new node[v_count];
    bool *vis=new bool[v_count];
    MEMSET_0(vis,bool,v_count);
    FOR(i,0,v_count){
        cin>>node_list[i].s>>node_list[i].lchild>>node_list[i].rchild;
        if(node_list[i].lchild!=-1){
            node_list[i].lchild--;
            vis[node_list[i].lchild]=true;
        }
        if(node_list[i].rchild!=-1){
            node_list[i].rchild--;
            vis[node_list[i].rchild]=true;
        }
    }
    FOR(i,0,v_count){
        if(!vis[i]){
            root=i;
            break;
        }
    }
    dfs(root);
    int len=node_list[root].s.length();
    if(node_list[root].s[0]!='('){
        cout<<node_list[root].s;
        return 0;
    }
    string res=node_list[root].s.substr(1,len-2);
    cout<<res;
	return 0;
}






#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdlib>
#include<cstring>
#include<queue>
#include<cmath>
#include<map>
#include<unordered_map>
#include<unordered_set>
#include<set>
#include<regex>
#define FOR(i,a,b) for( int i=(a);i<(b);++i)
#define MEMSET(arr,value,type,length) memset(arr,value,sizeof(type)*length)
#define MEMSET_0(arr,type,length) MEMSET(arr,0,type,length)
#define MEMSET_MIN(arr,type,length) MEMSET(arr,-0x3f,type,length)
#define MEMSET_MAX(arr,type,length) MEMSET(arr,0x3f,type,length)
#define READ_INT(i) int i;cin>>i
using namespace std;
int e_count,threshold;

struct gang{
    int weight=0;
    string leader;
    int _count=0;
};
bool cmp(gang &g1,gang &g2){
    return g1.leader<g2.leader;
}
unordered_map<string,int> w_map;
vector<gang> clique;

struct people{
    string name1;
    int pre=0;
    int weight=0;
    bool vis=false;
};
vector<people> peoples;
unordered_map<string,int> name_map;
unordered_set<string> s;
int _index=0;


int _find(int a){
    if(peoples[a].pre==a)return a;
    return peoples[a].pre=_find(peoples[a].pre);
}
void _union(int a,int b){
    int tmp1=_find(a);
    int tmp2=_find(b);
    peoples[tmp2].pre=tmp1;
}

int main()
{
    freopen("data.txt","r",stdin);
    cin>>e_count>>threshold;

    FOR(i,0,e_count){
        string a,b;int c;
        cin>>a>>b>>c;
        if(s.find(a)==s.end()){
            people p;
            p.name1=a;
            p.pre=_index;
            p.weight+=c;

            name_map[a]=_index;
            peoples.push_back(p);
            _index++;
            s.insert(a);
        }
        else{
            int tmp=name_map[a];
            peoples[tmp].weight+=c;
        }
        if(s.find(b)==s.end()){
            people p;
            p.name1=b;
            p.pre=_index;
            p.weight+=c;

            name_map[b]=_index;
            peoples.push_back(p);
            _index++;
            s.insert(b);
        }
        else{
            int tmp=name_map[b];
            peoples[tmp].weight+=c;
        }

        int tmp1=name_map[a];
        int tmp2=name_map[b];
        _union(tmp1,tmp2);

    }

    FOR(i,0,_index){
        gang g;
        if(!peoples[i].vis){
            int n=i,_max=peoples[i].weight;
            int tmp=_find(peoples[i].pre);
            FOR(j,i,_index){
                if(_find(peoples[j].pre)==tmp){
                    g.weight+=peoples[j].weight;
                    g._count++;
                    peoples[j].vis=true;

                    if(peoples[j].weight>_max){
                        n=j;_max=peoples[j].weight;
                    }
                }
            }
            g.leader=peoples[n].name1;
        }
        if(g.weight<=threshold*2)continue;
        if(g._count<=2) continue;
        clique.push_back(g);
    }

    sort(clique.begin(),clique.end(),cmp);
    printf("%d\n",clique.size());
    for(auto &g:clique){
        printf("%s %d\n",g.leader.c_str(),g._count);
    }

	return 0;
}





#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdio>
#include<string>
#include<vector>
#include<algorithm>
#include<math.h>
#include<regex>
#include<set>
#include<unordered_map>
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
using namespace std;

int case_count,node_count;
int *pre_order,*in_order;

int a,b;

//status -1 a
//       -2 b
//       -3 a b
//       1  a is b
//       2  b is a
//       5  lca
int ancestor;

unordered_map<int,int> m;
unordered_map<int,int> pre_location;
unordered_map<int,int> in_location;

int main()
{
    freopen("data.txt","r",stdin);
    cin>>case_count>>node_count;

    pre_order=new int[node_count];
    in_order=new int[node_count];


    for(int i=0;i<node_count;i++){
        cin >>in_order[i];
        m[in_order[i]]=1;
        in_location[in_order[i]]=i;
    }
    for(int i=0;i<node_count;i++){
        cin >>pre_order[i];
        pre_location[pre_order[i]]=i;
    }

    for(int i=0;i<case_count;i++){
        cin>>a>>b;

        int status;
        if(!m[a]){
            if(!m[b]){
                status= -3;
            }
            else status= -1;
        }
        else if(!m[b])
        {
            status= -2;
        }
        else
        {
            int in_pos_a=in_location[a];
            int in_pos_b=in_location[b];
            int pre_pos_a=pre_location[a];
            int pre_pos_b=pre_location[b];


                if(in_pos_a>in_pos_b){
                    FOR(i,0,node_count){
                        int tmp=in_location[pre_order[i]];
                        if(tmp<=in_pos_a && tmp>=in_pos_b){
                            ancestor=pre_order[i];
                            break;
                        }
                    }
                }else{
                    FOR(i,0,node_count){
                        int tmp=in_location[pre_order[i]];
                        if(tmp<=in_pos_b && tmp>=in_pos_a){
                            ancestor=pre_order[i];
                            break;
                        }
                    }
                }
                if(ancestor==a){
                    status=1;
                }else if(ancestor==b){
                    status=2;
                }else{
                    status =5;
                }
        }



        switch(status){
        case -1:
            printf("ERROR: %d is not found.\n",a);
            break;
        case -2:
            printf("ERROR: %d is not found.\n",b);
            break;
        case -3:
            printf("ERROR: %d and %d are not found.\n",a,b);
            break;
        case 1:
            printf("%d is an ancestor of %d.\n",a,b);
            break;
        case 2:
            printf("%d is an ancestor of %d.\n",b,a);
            break;
        case 5:
            printf("LCA of %d and %d is %d.\n",a,b,ancestor);
            break;
        }
    }
	return 0;
}

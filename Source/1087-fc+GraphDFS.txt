#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdlib>
#include<cstring>
#include<queue>
#include<cmath>
#include<map>
#include<unordered_map>
#include<set>
#include<regex>
#define FOR(i,a,b) for( int i=(a);i<(b);++i)
#define MEMSET(arr,value,type,length) memset(arr,value,sizeof(type)*length)
#define READ_IN(i) int i;cin>>i
using namespace std;
int city_count,edge_count,_start;
struct city{
    string name;
    int _happiess;
}*cities;
unordered_map<string,int>query_number;

int **adj;


struct path{
    vector<int> d;
    int _cost;
    int _happniess;
    path(stack<int> &st,int cost,int hap)
    {
        stack<int> st2(st);
        int len=st.size();
        FOR(i,0,len){
            d.push_back(st2.top());
            st2.pop();
        }
        _cost=cost;
        _happniess=hap;
    };
};

bool cmp(const path&a,const path&b){
    if(a._happniess!=b._happniess){
        return a._happniess>b._happniess;
    }
    int la=a.d.size();
    int lb=b.d.size();
    return la<lb;
}

vector<path> v;
stack<int> st;
int max_cost=0x3f3f3f3f;
bool* vis;

void dfs(int _st,int _end,int _count,int _cost,int _happy){
    st.push(_st);
    vis[_st]=true;
    if(_cost>max_cost){;}
    else if(_st==_end){
        if(_cost==max_cost){
            v.push_back(*new path(st,_cost,_happy));
        }
        else if(_cost<max_cost){
            max_cost=_cost;
            v.clear();
            v.push_back(*new path(st,_cost,_happy));
        }
    }
    else{
        FOR(i,0,city_count){

            if(!vis[i]&&adj[_start][i]!=0x3f3f3f3f){
                dfs(i,_end,_count+1,_cost+adj[_start][i],_happy+cities[i]._happiess);
            }
        }
    }
    st.pop();
    vis[_st]=false;
    return;
}


int main()
{
    freopen("data.txt","r",stdin);
    cin>>city_count>>edge_count;
    cities=new city[city_count];

    cin>>cities[0].name;

    FOR(i,1,city_count){
        cin>>cities[i].name>>cities[i]._happiess;
        query_number[cities[i].name]=i;
    }

    adj=new int*[city_count];
    FOR(i,0,city_count){
        adj[i]=new int[city_count];
        MEMSET(adj[i],0x3f,int,city_count);
    }

    vis=new bool[city_count];
    MEMSET(vis,0,bool,city_count);

    FOR(i,0,edge_count){
        string s1,s2;
        cin>>s1>>s2;
        READ_IN(tmp);
        int foo=query_number[s1];
        int bar=query_number[s2];
        adj[foo][bar]=adj[bar][foo]=tmp;
        adj[foo][foo]=adj[bar][bar]=0;
    }
    dfs(0,query_number["ROM"],1,0,0);

    sort(v.begin(),v.end(),cmp);
    int avg=v[0]._happniess/(v[0].d.size()-1);
    printf("%d %d %d %d\n",v.size(),v[0]._cost,v[0]._happniess,avg);

    int len=v[0].d.size();
    for(int i=len-1;i>=0;i--){
        if(i!=0){
            printf("%s->",cities[v[0].d[i]].name.c_str());
        }else{
            printf("%s",cities[v[0].d[i]].name.c_str());
        }
    }
	return 0;
}



#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#define FOR(a,j,k) for(int a=(j);a<(k);a++)
#define READ_INT(i) int i;cin>>i
#define MEMSET(a,b,c,d) memset(a,b,sizeof(c)*d)
#define MEMSET_0(a,c,d) MEMSET(a,0,c,d)
#define MEMSET_MAX(a,c,d) MEMSET(a,0x3f,c,d)
#define MEMSET_MIN(a,c,d) MEMSET(a,-0x3f,c,d)
#include<vector>
#include<cstdio>
#include<set>
#include<unordered_set>
#include<algorithm>
#include<map>
#include<string>
#include<cmath>
#include<cstring>
#include<unordered_map>
using namespace std;
bool isPrime(int i) {
	if (i < 2)return false;
	if (i == 2)return true;
	int k = (int)sqrt((double)i);
	FOR(j, 2, k+1) {
		if (i%j == 0) return false;
	}
	return true;
}
int user_size,insert_count, query_count;
int* _hash;

void insert(int key) {
	FOR(i, 0, user_size+1) {
		int pos = (key + i * i)%user_size;
		if (_hash[pos] < 0) {
			_hash[pos] = key;
			return;
		}
	}
	printf("%d cannot be inserted.\n", key);
}
int find(int key) {
	int tmp = 0;
	FOR(i, 0, user_size+1) {
		tmp++;
		int pos = (key + i * i) % user_size;
		if (_hash[pos] < 0) {
			break;
		}
		if (_hash[pos] ==key) {
			break;
		}
	}
	return tmp;
}


int main()
{
	//freopen("data.txt", "r", stdin);

	cin >> user_size >> insert_count >> query_count;
	for (;!isPrime(user_size); user_size++);

	_hash = new int[user_size];
	MEMSET_MIN(_hash, int, user_size);
	FOR(i, 0, insert_count) {
		READ_INT(a);
		insert(a);
	}
	double total=0;
	FOR(i, 0, query_count) {
		READ_INT(a);
		total+=find(a);
	}
	printf("%0.1f", total / query_count);
	return 0;
}

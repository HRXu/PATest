#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#define FOR(a,j,k) for(int a=(j);a<(k);a++)
#define READ_INT(i) int i;cin>>i
#define MEMSET(a,b,c,d) memset(a,b,sizeof(c)*d)
#define MEMSET_0(a,c,d) MEMSET(a,0,c,d)
#define MEMSET_MAX(a,c,d) MEMSET(a,0x3f,c,d)
#define MEMSET_MIN(a,c,d) MEMSET(a,-0x3f,c,d)
#include<vector>
#include<cstdio>
#include<set>
#include<unordered_set>
#include<algorithm>
#include<string>
#include<cstring>
#include<unordered_map>
using namespace std;
int v_count,e_count, query_count;

int** adj;

int* query_arr;
bool *vis;
bool check() {
	FOR(i, 0, v_count) {
		vis[query_arr[i]] = true;
		FOR(j, 0, v_count) {
			if (!vis[j] && adj[j][query_arr[i]] == 1) {
				return false;
			}
		}
	}
	return true;
}
int main()
{
	//freopen("data.txt", "r", stdin);
	cin >> v_count >> e_count;
	adj = new int*[v_count];
	vis = new bool[v_count];
	FOR(i, 0, v_count) {
		adj[i] = new int[v_count];
		MEMSET_MAX(adj[i], int, v_count);
	}

	FOR(i, 0, e_count) {
		READ_INT(a); READ_INT(b);
		a--; b--;
		adj[a][b] = 1;
		adj[a][a] = adj[b][b]=1;
	}



	cin >> query_count;
	vector<int> res;
	query_arr = new int[v_count];
	FOR(i, 0, query_count) {
		MEMSET_0(query_arr, int, v_count);
		MEMSET_0(vis, bool, v_count);
		FOR(j, 0, v_count) {
			cin >> query_arr[j];
			query_arr[j]--;
		}
		if (!check()) {
			res.push_back(i);
		}
	}

	for (int i = 0, len = res.size(); i < len; i++) {
		if (i == len - 1) {
			printf("%d", res[i]);
		}
		else {
			printf("%d ", res[i]);
		}
	}
	return 0;
}

#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdlib>
#include<cstring>
#include<queue>
#include<cmath>
#include<map>
#include<unordered_map>
#include<set>
#include<regex>
#define FOR(i,a,b) for( int i=(a);i<(b);++i)
#define MEMSET(arr,value,type,length) memset(arr,value,sizeof(type)*length)
#define MEMSET_0(arr,type,length) MEMSET(arr,0,type,length)
#define MEMSET_MIN(arr,type,length) MEMSET(arr,-0x3f,type,length)
#define MEMSET_MAX(arr,type,length) MEMSET(arr,0x3f,type,length)
#define READ_INT(i) int i;scanf("%d",&i)
using namespace std;
int v_count,e_count;

int* degree;


int **adj;
bool *vis;

void dfs(int _start){
    vis[_start]=true;
    FOR(i,0,v_count){
        if(!vis[i]&&adj[_start][i]!=0x3f3f3f3f){
            dfs(i);
        }
    }
}


int main()
{
    freopen("data.txt","r",stdin);
    cin>>v_count>>e_count;
    degree=new int[v_count];
    MEMSET_0(degree,int,v_count);
    adj=new int*[v_count];
    FOR(i,0,v_count){
        adj[i]=new int[v_count];
        MEMSET_MAX(adj[i],int,v_count);
    }
    vis=new bool[v_count];
    MEMSET_0(vis,bool,v_count);

    FOR(i,0,e_count){
        READ_INT(a);READ_INT(b);
        a--;b--;
        degree[a]++;
        degree[b]++;
        adj[a][b]=adj[b][a]=1;
    }

    bool flag=true;
    dfs(0);
    FOR(i,0,v_count){
        if(!vis[i]){
            flag=false;
            break;
        }
    }



    int odd=0;
    FOR(i,0,v_count){
        if(degree[i]%2==1)odd++;

        if(i==v_count-1){
            printf("%d\n",degree[i]);
        }
        else{
            printf("%d ",degree[i]);
        }
    }

    if(!flag){
        printf("Non-Eulerian");
    }
    else if(odd==0){
        printf("Eulerian");
    }
    else if(odd==2){
        printf("Semi-Eulerian");
    }
    else{
        printf("Non-Eulerian");
    }
	return 0;
}





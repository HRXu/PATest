#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdio>
#include<string>
#include<vector>
#include<algorithm>
#include<math.h>
#include<regex>
#include<set>
#include<unordered_map>
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define MEMSET_MAX(i,j,k) memset(i,0x3f,sizeof(j)*k)
#define MEMSET_0(i,j,k) memset(i,0,sizeof(j)*k)
#define INF 0x3f3f3f3f
#define READ_INT(i) int i;cin>>i
using namespace std;
int lines_count;

unordered_map<int,unordered_map<int,int>> line_info;
unordered_map<int,vector<int>>adj_map;
struct path{
    vector<int> p;
    int _changes;
    path(stack<int> &_st,int _end){
        _changes=-1;
        p.push_back(_end);
        int status=0;
        int pre=_end;
        stack<int> d(_st);
        while(d.size()!=0){
            int foo=d.top();
            if(status!=line_info[foo][pre]){
                status=line_info[foo][pre];
                _changes++;
            }
            pre=foo;
            p.push_back(foo);
            d.pop();
        }
    }
};

bool vis[10000];
int _min_sts=100000;
vector<path> v;
stack<int> st;

void dfs(int _begin,int _end,int _sts){
    if(_begin==_end){
        if(_sts>_min_sts)return;
        if(_sts<_min_sts){
            v.clear();
            _min_sts=_sts;
            v.push_back(path(st,_end));
        }
        else{
            v.push_back(path(st,_end));
        }
        return;
    }
    vis[_begin]=true;
    st.push(_begin);

    for(auto &it:adj_map[_begin]){
        if(!vis[it]){
            dfs(it,_end,_sts+1);
        }
    }

    st.pop();
    vis[_begin]=false;
}

bool cmp(path &a,path &b){
    return a._changes<b._changes;
}
void display(path &a){
    vector<int> &bar=a.p;
    int len=a.p.size();
    int pre=a.p[len-1];
    int status=line_info[pre][a.p[len-2]];
    int sta=pre;

    for(int i=len-1;i>=0;i--){
        if(i==0){
            printf("Take Line#%d from %04d to %04d.\n",status,sta,a.p[0]);
        }
        else if(line_info[pre][a.p[i-1]]==status){
                pre=a.p[i-1];
                continue;
        }
        else{
            printf("Take Line#%d from %04d to %04d.\n",status,sta,pre);
            status=line_info[pre][a.p[i-1]];
            sta=pre;
            pre=a.p[i-1];
        }
    }
}

void check(int _begin,int _end){
    MEMSET_0(vis,bool,10000);
    v.clear();

    _min_sts=100000;
    dfs(_begin,_end,-1);
    sort(v.begin(),v.end(),cmp);
    printf("%d\n",v[0].p.size()-1);
    display(v[0]);
}



int main()
{
    freopen("data.txt","r",stdin);
    cin>>lines_count;
    FOR(i,0,lines_count){
        READ_INT(c);
        int a;
        FOR(j,0,c){
            if(j==0){
                cin>>a;
            }
            else{
                READ_INT(b);
                adj_map[a].push_back(b);
                adj_map[b].push_back(a);
                line_info[a][b]=i+1;
                line_info[b][a]=i+1;
                a=b;
            }
        }
    }

    READ_INT(query_count);
    FOR(i,0,query_count){
        READ_INT(a);READ_INT(b);
        check(a,b);
    }
	return 0;
}









